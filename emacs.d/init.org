#+TITLE: Emacs Config
* Removing some of the training wheels
  I don't need to see the emacs splash screen every time I start
  emacs.

  And the toolbar is temptation to use the mouse; not to mention the
  fact that it forces to you to learn (sometimes very strange)
  iconography.

#+begin_src emacs-lisp :tangle yes
(setq inhibit-startup-message t)
(tool-bar-mode -1)
#+end_src

* Customizations
  You can put customizations into their own file so that they don't
  clutter up this one.

#+begin_src emacs-lisp :tangle yes
;; Keep customizations in their own file
(setq custom-file "~/.emacs.d/.emacs-custom.el")
(load custom-file)
#+end_src

* Set Up Package Sources

#+begin_src emacs-lisp :tangle yes
(require 'package)
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.org/packages/"))
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages")))

(package-initialize)
#+end_src

For some reason, a few packages don't specify that they depend on
the ~cl~ packages, so I preemptively require them.

#+begin_src emacs-lisp :tangle yes
(require 'cl-lib)
(require 'cl)
#+end_src

* Modularization
  At some point I thought it made a lot of sense to split the init
  files into little modules based on functionality.  I'm not sure how
  to do that with org files, but also, most of the packages are
  heavily dependent on other packages, so splitting up by language
  environment, by package, or some other scheme I haven't thought of
  doesn't seem like it would work.  I'd like to see an example of
  someone doing it, though.  Modular init files is a good ideal to
  strive for.

#+begin_src emacs-lisp :tangle yes
;; No modularization for simplicity... (for now)
;; (add-to-list 'load-path "~/.emacs.d/elisp/")
#+end_src

* Config
** magit
  Magit is great.
#+begin_src emacs-lisp :tangle yes
  (require 'magit-gh-pulls)
  (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls)
#+end_src

** Temporary files
  I'm tired of emacs' temporary files showing up in my working tree.  This puts
  them into a tmp directory where they can easily be destroyed later.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC

* Completion and Syntax Checking
  I've run into a bit of an issue with my setup because the Rtags
  setup with cmake-ide actually apparently does something to do some
  syntax checking.  I'm not sure how to turn it off or what turned it
  on, really, but this setup is most of the way to being just what I
  want.

#+BEGIN_SRC emacs-lisp :tangle yes

;; Completion and Syntax Checking
(require 'company)
(global-company-mode)
(require 'irony)
(require 'flycheck-irony)
(require 'company-irony)

(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async)
  )
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

(add-hook 'c++-mode-hook 'flycheck-mode)
(add-hook 'c-mode-hook 'flycheck-mode)

(eval-after-load 'company
  '(add-to-list 'company-backends 'company-irony))
(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

(require 'rtags)
(cmake-ide-setup)
#+END_SRC

** Key Mappings
#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "<f5>") 'cmake-ide-compile)
(rtags-enable-standard-keybindings c-mode-base-map)
;;(rtags-spellcheck-enabled nil)
;;(rtags-completions-enabled t)
#+END_SRC

* C++ Configuration
#+BEGIN_SRC emacs-lisp :tangle yes
(setq c-default-style '((java-mode . "java")
	    ("awk-mode" . "awk")
	    (other . "stroustrup")))
(setq c-basic-offset 4)
(c-set-offset 'innamespace 0)
(c-set-offset 'inline-open 0)

;; Comments should wrap at 80 characters
(setq-default fill-column 80)
;; and they should do it automatically
(add-hook 'c-mode-common-hook 'auto-fill-mode)

;; Show trailing whitespace in code
(add-hook 'c-mode-common-hook (lambda ()
                                (setq-local show-trailing-whitespace t)))

;; No tabs
(setq-default indent-tabs-mode nil)

;; Treat .h files as C++
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

#+END_SRC

* Custom Functions

* Little Things
  Configure a bunch of little things that make my life a little bit
  better.

  Showing matching parenthesis is always nice.  And so is Being able
  to see what the current column is in the modeline.  Changing tags
  should be reloaded as a matter of course...


#+begin_src emacs-lisp :tangle yes
;; Little things
(show-paren-mode t)
(setq column-number-mode t)
#+end_src

** TODO Find a way to do TAGS better.  I'm tired of having to remember to re-run it and that it doesn't find stuff in deeper places in the source

#+being_src emacs-lisp :tangle yes
;; Don't ask to reload new TAGS. Of *course* I want new tags.
(setq tags-revert-without-query 1)
#+end_src

* EVIL (Must go before powerline)
  I use EVIL mode to turn emacs into what I consider a more powerful vim.  It
  doesn't quite do everything (and there are a few very annoying things I've
  noticed about it, like the escape sequence not working quickly enough
  sometimes), but it treats me well.

  This needs to go before powerline configuration because of a clash between
  elscreen (used by evil-tabs) and powerline.

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'evil)
(require 'evil-magit)
(evil-mode 1)
#+END_SRC

*** Sidenote
It's easy enough to fix the escape key sequence problem in terminal mode by
doing some tmux configuration.

** Window Bindings
   Closing windows with `C-w q`.  Moving between windows with C-<movement key>.

#+BEGIN_SRC emacs-lisp :tangle yes
(define-key evil-normal-state-map (kbd "C-w q") 'delete-window)

;; Easy Movement between windows
(define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
(define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
(define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
(define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
#+END_SRC

** Tabs
   It's easier to keep track of tabs than it is to keep track of emacs frames.

   #+BEGIN_SRC emacs-lisp :tangle yes
   (global-evil-tabs-mode t)
   #+END_SRC

** Leader Key
   Comma as the leader key.
#+BEGIN_SRC emacs-lisp :tangle yes
(global-evil-leader-mode)
(evil-leader/set-leader ",")
#+END_SRC


* Appearance
  The theme is badwolf, and I like powerline.

  #+BEGIN_SRC emacs-lisp :tangle yes
  ;; Appearance
  (load-theme 'badwolf)
  (require 'powerline)
  (powerline-center-evil-theme)
  (setq powerline-display-buffer-size nil)
  (setq powerline-display-mule-info nil)
  (setq powerline-display-hud nil)
  (require 'airline-themes)
  (load-theme 'airline-badwolf)
  #+END_SRC

  Relative line numbers are great. It's easier to move around using prefixes and
  that kind of thing.

  #+BEGIN_SRC emacs-lisp :tangle yes
  (require 'relative-line-numbers)
  (add-hook 'prog-mode-hook 'relative-line-numbers-mode t)
  (add-hook 'prog-mode-hook 'line-number-mode t)
  #+END_SRC

** Persistent search highlighting
   Vim-like persistent search highlighting.  Clear it with <leader>-RET.
   #+BEGIN_SRC emacs-lisp :tangle yes
   (require 'evil-search-highlight-persist)
   (global-evil-search-highlight-persist t)

   (evil-leader/set-key "RET" 'evil-search-highlight-persist-remove-all)
   #+END_SRC

* Org configuration
#+BEGIN_SRC emacs-lisp :tangle yes
;; org
(require 'org)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)

(setq org-directory "~/Dropbox/org")
(setq org-mobile-inbox-for-pull "~/Dropbox/org/flagged.org")
(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")

(setq org-agenda-files (list "~/Dropbox/org/work.org"
			     "~/Dropbox/org/home.org"))
#+END_SRC

Auto-fill mode in org-mode.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC

* Final Things
Stuff that needs to happen at the end of everything else.

** TODO Make this section unnecessary with some "after" function

** Diminish Mode line
Collapse some of the stuff in the modeline so that it's readable at half-screen
sizes.  We use the diminish package to help us do that.

#+BEGIN_SRC emacs-lisp :tangle yes
;; Modeline cleanup
(require 'diminish)
(diminish 'undo-tree-mode)
;;(diminish 'undo-tree-mode "UT")
(diminish 'undo-tree-mode)
;;(diminish 'company-mode "Cp")
;;(diminish 'irony-mode "Fe")
;;(diminish 'flycheck-mode "Fc")
(diminish 'company-mode)
(diminish 'irony-mode)
(diminish 'flycheck-mode)
;;(diminish 'auto-fill-mode "Af")
(diminish 'auto-fill-mode)
;;(diminish 'abbrev-mode "Abv")
(diminish 'abbrev-mode)
;;(diminish 'auto-revert-mode "Rv")
(diminish 'auto-revert-mode)
#+END_SRC

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
;; End:
